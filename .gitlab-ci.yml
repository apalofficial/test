stages:
  - build
  - build-wait
  - test
  - deploy

.project-registry-login: &project-registry-login
  before_script:
    - echo -e "[[registry]]\nlocation = \"$CI_REGISTRY\"\ninsecure = true" > /etc/containers/registries.conf.d/ci.conf
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.sqa-connection: &sqa-connection
  secrets: &testnet-secrets
    TESTNET_CERT:
      vault: corp/build/bbodiya/crt@secret
      file: true
    TESTNET_KEY:
      vault: corp/build/bbodiya/key@secret
      file: true

.deploy-common: &deploy-common
  image:
    name: quay.io/podman/stable:v3.4.4
    entrypoint: [""]
  tags:
    - cap_sys_admin

.linode-QA-deploy: &linode-QA-deploy-connection
  <<: *deploy-common
  secrets:
    CI_DEPLOY_KEY:
      vault: corp/build/hello-ci-ed/key@secret
      file: true

.linode-PROD-deploy: &linode-PROD-deploy-connection
  <<: *deploy-common
  secrets:
    <<: *testnet-secrets
    CI_DEPLOY_KEY:
      vault: corp/build/hello-cd-ed/key@secret
      file: true

.k8s-QA-deploy-connection: &k8s-QA-deploy-connection
  <<: *deploy-common
  secrets:
    K8S_REGISTRY_USER:
      vault: corp/build/k8s-registry/user@secret
      file: false
    K8S_REGISTRY_PASSWORD:
      vault: corp/build/k8s-registry/password@secret
      file: false
    K8S_KUBECONFIG:
      vault: corp/build/k8s-qa/kubeconfig@secret
      file: true

.external-build-job:
  <<: *sqa-connection
  stage: build
  image: docker.io/alpine
  script:
    - apk add --update --no-cache dash openssl jq curl
    - dash job_scripts/queue-event.sh
  artifacts:
    paths:
      - artifacts/event_id.txt

podman-build-job:
  image: 
    name: quay.io/podman/stable:latest
  stage: build
  tags:
    - cap_sys_admin
    - dev_fuse
  variables:
    BUILDAH_ISOLATION: chroot
  <<: *project-registry-login
  script:
    - podman build --build-arg LISTEN_PORT=8080 --build-arg REGISTRY=docker.io --build-arg jobId=${CI_JOB_ID} --build-arg BUILD_SYSTEM=GitLab -f dockerfiles/deploy.Dockerfile -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - podman push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

.wait-for-completion:
  <<: *sqa-connection
  stage: build-wait
  needs:
    - job: external-build-job
  image: docker.io/alpine
  script:
    - apk add --update --no-cache bash openssl jq curl
    - bash job_scripts/wait-for-job.sh
  artifacts:
    paths:
      - artifacts/sourcejob_id.txt
      - artifacts/job_id.txt

.scan-job:
  <<: *sqa-connection
  stage: test
  needs:
    - job: wait-for-completion
  image:
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  script:
    - bash job_scripts/upload-for-scan.sh

linode-QA-deploy:
  <<: *linode-QA-deploy-connection
  stage: deploy
  needs:
    - job: podman-build-job
  environment:
    name: Linode-QA
    url: https://hello-ci.akamai.lol
  variables:
    PODMAN_USER: "ci-user"
    PODMAN_UID: "1000"
  <<: *project-registry-login
  script:
    - export JOB_ID=$CI_JOB_ID
    - podman pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - podman tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA docker.akamai.com/build-images-development/basic_connector/image:0.1-$JOB_ID
    - bash job_scripts/deploy.sh

.linode-PROD-deploy:
  <<: *linode-PROD-deploy-connection
  stage: deploy
  environment:
    name: Linode-PROD
    url: https://hello-cd.akamai.lol
  when: manual
  needs:
    - job: wait-for-completion
    - job: scan-job
  variables:
    PODMAN_USER: "cd-user"
    PODMAN_UID: "1001"
  script:
    - export JOB_ID=$(cat artifacts/job_id.txt)
    - bash job_scripts/pull-from-artifactory.sh
    - bash job_scripts/deploy.sh

k8s-QA-deploy:
  <<: *k8s-QA-deploy-connection
  stage: deploy
  environment:
    name: LKE-QA
    url: https://k8s-qa.linode.lol
  needs:
    - job: podman-build-job
  artifacts:
    paths:
      - artifacts/qa-deployment.yaml
  before_script:
    - echo -e "[[registry]]\nlocation = \"$CI_REGISTRY\"\ninsecure = true" > /etc/containers/registries.conf.d/ci.conf
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - podman login -u $K8S_REGISTRY_USER -p $K8S_REGISTRY_PASSWORD registry.linode.lol
  script:
    - bash job_scripts/k8s_deploy.sh